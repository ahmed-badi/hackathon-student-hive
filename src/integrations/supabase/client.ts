
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://gibsyygowtzieicrnqyv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdpYnN5eWdvd3R6aWVpY3JucXl2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1ODQ3OTMsImV4cCI6MjA2MzE2MDc5M30.gBG1diWhnz9cGFJwh-vSQgRd9Gzbu5nUu69C8TU5jWA";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
      },
    },
    db: {
      schema: 'public',
    },
    // Configuration for improving connection stability
    realtime: {
      timeout: 60000, // Increased timeout
    }
  }
);

// Utility function to check connection to Supabase with more details
export const checkSupabaseConnection = async () => {
  console.log("Attempting to connect to Supabase...");
  let attempts = 0;
  const maxAttempts = 3;
  
  while (attempts < maxAttempts) {
    try {
      const { data, error } = await supabase.from('registrations').select('count').limit(1);
      
      if (error) {
        console.error(`Supabase connection error (attempt ${attempts + 1}/${maxAttempts}):`, error);
        console.error("Error code:", error.code);
        console.error("Error message:", error.message);
        console.error("Details:", error.details);
        
        // Only show error toast on last attempt
        if (attempts === maxAttempts - 1) {
          toast.error(`Database connection error: ${error.message}`);
          return false;
        }
      } else {
        console.log("Supabase connection established successfully", data);
        toast.success("Connected to database successfully");
        return true;
      }
    } catch (e) {
      console.error(`Exception during Supabase connection attempt ${attempts + 1}/${maxAttempts}:`, e);
      if (e instanceof Error) {
        console.error("Error message:", e.message);
        console.error("Stack trace:", e.stack);
        
        // Only show error toast on last attempt
        if (attempts === maxAttempts - 1) {
          toast.error(`Database connection exception: ${e.message}`);
          return false;
        }
      }
    }
    
    // Wait before retrying
    if (attempts < maxAttempts - 1) {
      console.log(`Waiting before retry attempt ${attempts + 2}/${maxAttempts}...`);
      await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay between retries
    }
    
    attempts++;
  }
  
  return false;
};

// Utility function to test the ability to insert data
export const testSupabaseInsert = async () => {
  try {
    const testData = {
      first_name: "Test",
      last_name: "Connection",
      email: `test-${Date.now()}@example.com`,
      phone: "0000000000",
      university: "Test University",
      major: "Test Major",
      graduation_year: "2025",
      skills: ["test"],
      track: "open",
      experience: "Test",
      team_preference: "solo"
    };
    
    console.log("Attempting to insert test data into Supabase...", testData);
    
    const { data, error } = await supabase
      .from('registrations')
      .insert([testData])
      .select();
    
    if (error) {
      console.error("Error during test insert into Supabase:", error);
      return false;
    }
    
    console.log("Test insert into Supabase successful:", data);
    return true;
  } catch (e) {
    console.error("Exception during Supabase test insert:", e);
    return false;
  }
};
